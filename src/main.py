import os
import logging
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

import pandas as pd
import matplotlib.pyplot as plt
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7256436061:AAGUitHwh16QtEFM0NgLYtiYvKC6zkqnuc8'
DB_FILE = 'financial_data.db'

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CATEGORIES = {
    'expense': ['üçî –ï–¥–∞', 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üè† –ñ–∏–ª—å–µ', 'üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üè• –ó–¥–æ—Ä–æ–≤—å–µ', 'üëï –û–¥–µ–∂–¥–∞', '‚ùî –î—Ä—É–≥–æ–µ'],
    'income': ['üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞', 'üíª –§—Ä–∏–ª–∞–Ω—Å', 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'üéÅ –ü–æ–¥–∞—Ä–∫–∏', '‚ùî –î—Ä—É–≥–æ–µ']
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, Dict] = {}

class FinanceManager:
    def __init__(self):
        self.db_file = DB_FILE
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS transactions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    type TEXT NOT NULL,
                    category TEXT NOT NULL,
                    amount REAL NOT NULL,
                    date TIMESTAMP NOT NULL,
                    description TEXT
                )
            """)
            conn.commit()
    
    def _get_connection(self) -> sqlite3.Connection:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        return sqlite3.connect(self.db_file)
    
    def add_transaction(self, user_id: int, transaction_type: str, category: str,
                   amount: float, description: str = '') -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO transactions (user_id, type, category, amount, date, description)
                VALUES (?, ?, ?, ?, datetime('now'), ?)
            """, (user_id, transaction_type, category, amount, description))
            conn.commit()
    
    def get_statistics(self, user_id: int, period: str = 'week') -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        now = datetime.now()
        date_condition = ""
        
        if period == 'day':
            date_condition = f"AND date(date) = date('{now.date()}')"
        elif period == 'week':
            start_date = now - timedelta(days=now.weekday())
            date_condition = f"AND date(date) >= date('{start_date.date()}')"
        elif period == 'month':
            date_condition = f"AND strftime('%m', date) = '{now.month:02d}'"
        
        with self._get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
            cursor.execute(f"""
                SELECT category, SUM(amount) as total 
                FROM transactions 
                WHERE user_id = ? AND type = 'expense' {date_condition}
                GROUP BY category
            """, (user_id,))
            expenses = {row['category']: row['total'] for row in cursor.fetchall()}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã
            cursor.execute(f"""
                SELECT category, SUM(amount) as total 
                FROM transactions 
                WHERE user_id = ? AND type = 'income' {date_condition}
                GROUP BY category
            """, (user_id,))
            income = {row['category']: row['total'] for row in cursor.fetchall()}
            
            # –û–±—â–∏–µ —Å—É–º–º—ã
            cursor.execute(f"""
                SELECT 
                    SUM(CASE WHEN type = 'expense' THEN amount ELSE 0 END) as total_expenses,
                    SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) as total_income
                FROM transactions 
                WHERE user_id = ? {date_condition}
            """, (user_id,))
            totals = cursor.fetchone()
            
            return {
                'total_expenses': totals['total_expenses'] or 0,
                'expenses_by_category': expenses,
                'total_income': totals['total_income'] or 0,
                'income_by_category': income
            }
    
    def get_transactions(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    id,
                    user_id,
                    type,
                    category,
                    amount,
                    strftime('%Y-%m-%d %H:%M:%S', date) as date,
                    description
                FROM transactions 
                WHERE user_id = ? 
                ORDER BY date DESC 
                LIMIT ?
            """, (user_id, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def generate_report(self, user_id: int, period: str = 'week') -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        stats = self.get_statistics(user_id, period)

        period_names = {'day': '–¥–µ–Ω—å', 'week': '–Ω–µ–¥–µ–ª—é', 'month': '–º–µ—Å—è—Ü'}
        report = [
            f"üìä –û—Ç—á–µ—Ç –∑–∞ {period_names.get(period, period)}",
            f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            "\nüíµ –î–æ—Ö–æ–¥—ã:"
        ]

        if stats['income_by_category']:
            for category, amount in stats['income_by_category'].items():
                report.append(f"  - {category}: {amount:.2f} ‚ÇΩ")
            report.append(f"  –í—Å–µ–≥–æ: {stats['total_income']:.2f} ‚ÇΩ")
        else:
            report.append("  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        report.append("\nüí∏ –†–∞—Å—Ö–æ–¥—ã:")
        if stats['expenses_by_category']:
            for category, amount in stats['expenses_by_category'].items():
                report.append(f"  - {category}: {amount:.2f} ‚ÇΩ")
            report.append(f"  –í—Å–µ–≥–æ: {stats['total_expenses']:.2f} ‚ÇΩ")
        else:
            report.append("  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        balance = stats.get('total_income', 0) - stats.get('total_expenses', 0)
        report.append(f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ")

        return "\n".join(report)

    def plot_statistics(self, user_id: int, period: str = 'week') -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.get_statistics(user_id, period)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not stats['expenses_by_category'] and not stats['income_by_category']:
            return None

        plt.switch_backend('Agg')  # –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö
        plt.style.use('ggplot')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))
        fig.suptitle(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {self._get_period_name(period)}")
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if stats['expenses_by_category']:
            expenses = stats['expenses_by_category']
            ax1.pie(
                expenses.values(),
                labels=expenses.keys(),
                autopct=lambda p: f'{p:.1f}%\n({p*sum(expenses.values())/100:.2f} ‚ÇΩ)',
                startangle=90
            )
            ax1.set_title('–†–∞—Å—Ö–æ–¥—ã')
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤
        if stats['income_by_category']:
            income = stats['income_by_category']
            ax2.pie(
                income.values(),
                labels=income.keys(),
                autopct=lambda p: f'{p:.1f}%\n({p*sum(income.values())/100:.2f} ‚ÇΩ)',
                startangle=90
            )
            ax2.set_title('–î–æ—Ö–æ–¥—ã')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        filename = f"chart_{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.png"
        plt.savefig(filename, dpi=100, bbox_inches='tight')
        plt.close()
        
        return filename

    def _get_period_name(self, period: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞"""
        period_names = {
            'day': '–¥–µ–Ω—å',
            'week': '–Ω–µ–¥–µ–ª—é',
            'month': '–º–µ—Å—è—Ü'
        }
        return period_names.get(period, period)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
finance = FinanceManager()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(commands=['menu'])
def show_main_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    buttons = [
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥'),
        types.KeyboardButton('‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'),
        types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        types.KeyboardButton('üìù –û—Ç—á—ë—Ç'),
        types.KeyboardButton('üìã –ò—Å—Ç–æ—Ä–∏—è'),
        types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    ]
    
    markup.add(*buttons)
    bot.send_message(
        message.chat.id,
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é"""
    show_main_menu(message)
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/add_income - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
        "/add_expense - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/report - –æ—Ç—á—ë—Ç—ã\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        "/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥')
def add_income_button(message):
    add_income(message)

@bot.message_handler(func=lambda m: m.text == '‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥')
def add_expense_button(message):
    add_expense(message)

@bot.message_handler(func=lambda m: m.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def stats_button(message):
    stats_command(message)

@bot.message_handler(func=lambda m: m.text == 'üìù –û—Ç—á—ë—Ç')
def report_button(message):
    report_command(message)

@bot.message_handler(func=lambda m: m.text == 'üìã –ò—Å—Ç–æ—Ä–∏—è')
def history_button(message):
    history_command(message)

@bot.message_handler(func=lambda m: m.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def help_button(message):
    start(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = call.from_user.id
    data = call.data

    if data.startswith(('expense_', 'income_')):
        transaction_type, category = data.split('_', 1)
        user_data[user_id]['state'] = 'awaiting_amount'
        user_data[user_id]['category'] = category

        bot.edit_message_text(
            f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
            call.message.chat.id,
            call.message.message_id
        )

    elif data.startswith('stats_'):
        period = data.split('_')[1]
        show_statistics(call, user_id, period)

    elif data.startswith('report_'):
        period = data.split('_')[1]
        show_report(call, user_id, period)

def show_statistics(call: types.CallbackQuery, user_id: int, period: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"""
    report_text = finance.generate_report(user_id, period)
    chart_path = finance.plot_statistics(user_id, period)

    if chart_path:
        with open(chart_path, 'rb') as chart:
            bot.send_photo(
                call.message.chat.id,
                chart,
                caption=report_text
            )
        os.remove(chart_path)
    else:
        bot.send_message(call.message.chat.id, report_text + "\n\n‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")

def show_report(call: types.CallbackQuery, user_id: int, period: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    report_text = finance.generate_report(user_id, period)
    bot.send_message(call.message.chat.id, report_text)

@bot.message_handler(func=lambda m: user_data.get(m.from_user.id, {}).get('state') == 'awaiting_amount')
def handle_amount(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    user_id = message.from_user.id

    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        user_data[user_id]['amount'] = amount
        user_data[user_id]['state'] = 'awaiting_description'

        bot.send_message(
            message.chat.id,
            "üí¨ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–û–±–µ–¥ –≤ –∫–∞—Ñ–µ' –∏–ª–∏ '–ê–≤–∞–Ω—Å –∑–∞ –ø—Ä–æ–µ–∫—Ç'"
        )

    except ValueError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 99.99)")

@bot.message_handler(func=lambda m: user_data.get(m.from_user.id, {}).get('state') == 'awaiting_description')
def handle_description(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    user_id = message.from_user.id
    description = message.text if message.text.strip() != '-' else ''

    transaction_data = user_data[user_id]
    finance.add_transaction(
        user_id=user_id,
        transaction_type=transaction_data['type'],
        category=transaction_data['category'],
        amount=transaction_data['amount'],
        description=description
    )

    transaction_type = "—Ä–∞—Å—Ö–æ–¥" if transaction_data['type'] == 'expense' else "–¥–æ—Ö–æ–¥"
    emoji = "üìâ" if transaction_data['type'] == 'expense' else "üìà"

    bot.send_message(
        message.chat.id,
        f"{emoji} –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω {transaction_type}:\n\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction_data['category']}\n"
        f"üí≥ –°—É–º–º–∞: {transaction_data['amount']:.2f} ‚ÇΩ\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else '–Ω–µ—Ç'}"
    )

    del user_data[user_id]

@bot.message_handler(commands=['stats'])
def stats_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data="stats_day"),
        types.InlineKeyboardButton("üìÜ –ù–µ–¥–µ–ª—è", callback_data="stats_week"),
        types.InlineKeyboardButton("üóì –ú–µ—Å—è—Ü", callback_data="stats_month")
    )
    bot.send_message(message.chat.id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=markup)

@bot.message_handler(commands=['report'])
def report_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data="report_day"),
        types.InlineKeyboardButton("üìÜ –ù–µ–¥–µ–ª—è", callback_data="report_week"),
        types.InlineKeyboardButton("üóì –ú–µ—Å—è—Ü", callback_data="report_month")
    )
    bot.send_message(message.chat.id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=markup)

@bot.message_handler(commands=['history'])
def history_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π"""
    user_id = message.from_user.id
    transactions = finance.get_transactions(user_id)
    
    if not transactions:
        bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.")
        return
    
    history_text = ["üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π:\n"]
    
    for trans in transactions:
        operation_type = "üìâ –†–∞—Å—Ö–æ–¥" if trans['type'] == 'expense' else "üìà –î–æ—Ö–æ–¥"
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ 'YYYY-MM-DD HH:MM:SS'
            date_obj = datetime.strptime(trans['date'], '%Y-%m-%d %H:%M:%S')
            date_str = date_obj.strftime('%d.%m %H:%M')
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            date_str = "—Å–µ–≥–æ–¥–Ω—è"
        
        description = f"\n   üìù {trans['description']}" if trans['description'] else ""
        
        history_text.append(
            f"{operation_type} | {trans['category']}\n"
            f"   üí∞ {trans['amount']:.2f} ‚ÇΩ | ‚è± {date_str}{description}\n"
        )
    
    bot.send_message(message.chat.id, "\n".join(history_text))
    
@bot.message_handler(commands=['add_income', 'add_expense'])
def add_transaction_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤"""
    if message.text == '/add_income':
        add_income(message)
    else:
        add_expense(message)

def add_expense(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (–≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)"""
    user_id = message.from_user.id
    user_data[user_id] = {'state': 'awaiting_category', 'type': 'expense'}
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(cat, callback_data=f"expense_{cat}") 
              for cat in DEFAULT_CATEGORIES['expense']]
    markup.add(*buttons)
    
    bot.send_message(
        message.chat.id, 
        "üìâ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", 
        reply_markup=markup
    )

def add_income(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ (–≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)"""
    user_id = message.from_user.id
    user_data[user_id] = {'state': 'awaiting_category', 'type': 'income'}
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(cat, callback_data=f"income_{cat}") 
              for cat in DEFAULT_CATEGORIES['income']]
    markup.add(*buttons)
    
    bot.send_message(
        message.chat.id, 
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", 
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith(('expense_', 'income_')))
def category_selected(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = call.from_user.id
    data = call.data.split('_')
    
    user_data[user_id]['category'] = '_'.join(data[1:])  # –ù–∞ —Å–ª—É—á–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
    user_data[user_id]['state'] = 'awaiting_amount'
    
    bot.edit_message_text(
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data[user_id]['category']}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        call.message.chat.id,
        call.message.message_id
    )

@bot.message_handler(func=lambda m: user_data.get(m.from_user.id, {}).get('state') == 'awaiting_amount')
def handle_amount_input(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    user_id = message.from_user.id
    
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError()
            
        user_data[user_id]['amount'] = amount
        user_data[user_id]['state'] = 'awaiting_description'
        
        bot.send_message(
            message.chat.id,
            "üí¨ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
        
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 99.99)"
        )

@bot.message_handler(func=lambda m: user_data.get(m.from_user.id, {}).get('state') == 'awaiting_description')
def handle_description_input(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    user_id = message.from_user.id
    description = message.text if message.text.strip() != '-' else ''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    finance.add_transaction(
        user_id=user_id,
        transaction_type=user_data[user_id]['type'],
        category=user_data[user_id]['category'],
        amount=user_data[user_id]['amount'],
        description=description
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    transaction_type = "—Ä–∞—Å—Ö–æ–¥" if user_data[user_id]['type'] == 'expense' else "–¥–æ—Ö–æ–¥"
    emoji = "üìâ" if user_data[user_id]['type'] == 'expense' else "üìà"
    
    bot.send_message(
        message.chat.id,
        f"{emoji} –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω {transaction_type}:\n\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data[user_id]['category']}\n"
        f"üí≥ –°—É–º–º–∞: {user_data[user_id]['amount']:.2f} ‚ÇΩ\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else '–Ω–µ—Ç'}"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_data[user_id]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.infinity_polling()

if __name__ == '__main__':
    bot.infinity_polling()
